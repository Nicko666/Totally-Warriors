//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""AndroidInput"",
            ""id"": ""0246a463-7f36-422e-8ccf-1c91ec66f417"",
            ""actions"": [
                {
                    ""name"": ""Home"",
                    ""type"": ""Button"",
                    ""id"": ""3a63371b-324d-4fc0-8b02-9d83ef94aeb1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""ba1d5bc4-5af0-4d97-beff-191b7267bdef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""69c26762-b9ad-4bc7-9c62-aaf3d844f9f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""277a416a-9240-4cd1-abb1-02621181ca7a"",
                    ""path"": ""<Keyboard>/home"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Home"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c140e6d-f5ca-467f-8bdc-fe3004e60966"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aae307eb-8226-4f45-8b34-2c74887400e0"",
                    ""path"": ""*/{Menu}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // AndroidInput
        m_AndroidInput = asset.FindActionMap("AndroidInput", throwIfNotFound: true);
        m_AndroidInput_Home = m_AndroidInput.FindAction("Home", throwIfNotFound: true);
        m_AndroidInput_Escape = m_AndroidInput.FindAction("Escape", throwIfNotFound: true);
        m_AndroidInput_Menu = m_AndroidInput.FindAction("Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AndroidInput
    private readonly InputActionMap m_AndroidInput;
    private List<IAndroidInputActions> m_AndroidInputActionsCallbackInterfaces = new List<IAndroidInputActions>();
    private readonly InputAction m_AndroidInput_Home;
    private readonly InputAction m_AndroidInput_Escape;
    private readonly InputAction m_AndroidInput_Menu;
    public struct AndroidInputActions
    {
        private @Controls m_Wrapper;
        public AndroidInputActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Home => m_Wrapper.m_AndroidInput_Home;
        public InputAction @Escape => m_Wrapper.m_AndroidInput_Escape;
        public InputAction @Menu => m_Wrapper.m_AndroidInput_Menu;
        public InputActionMap Get() { return m_Wrapper.m_AndroidInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AndroidInputActions set) { return set.Get(); }
        public void AddCallbacks(IAndroidInputActions instance)
        {
            if (instance == null || m_Wrapper.m_AndroidInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AndroidInputActionsCallbackInterfaces.Add(instance);
            @Home.started += instance.OnHome;
            @Home.performed += instance.OnHome;
            @Home.canceled += instance.OnHome;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
        }

        private void UnregisterCallbacks(IAndroidInputActions instance)
        {
            @Home.started -= instance.OnHome;
            @Home.performed -= instance.OnHome;
            @Home.canceled -= instance.OnHome;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
        }

        public void RemoveCallbacks(IAndroidInputActions instance)
        {
            if (m_Wrapper.m_AndroidInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAndroidInputActions instance)
        {
            foreach (var item in m_Wrapper.m_AndroidInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AndroidInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AndroidInputActions @AndroidInput => new AndroidInputActions(this);
    public interface IAndroidInputActions
    {
        void OnHome(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
}
